/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as WaterfallGrandparentImport } from './routes/waterfall/grandparent'
import { Route as BlockingGrandparentImport } from './routes/blocking/grandparent'
import { Route as WaterfallGrandparentParentImport } from './routes/waterfall/grandparent/parent'
import { Route as BlockingGrandparentParentImport } from './routes/blocking/grandparent/parent'
import { Route as WaterfallGrandparentParentChildImport } from './routes/waterfall/grandparent/parent/child'
import { Route as BlockingGrandparentParentChildImport } from './routes/blocking/grandparent/parent/child'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const WaterfallGrandparentRoute = WaterfallGrandparentImport.update({
  path: '/waterfall/grandparent',
  getParentRoute: () => rootRoute,
} as any)

const BlockingGrandparentRoute = BlockingGrandparentImport.update({
  path: '/blocking/grandparent',
  getParentRoute: () => rootRoute,
} as any)

const WaterfallGrandparentParentRoute = WaterfallGrandparentParentImport.update(
  {
    path: '/parent',
    getParentRoute: () => WaterfallGrandparentRoute,
  } as any,
)

const BlockingGrandparentParentRoute = BlockingGrandparentParentImport.update({
  path: '/parent',
  getParentRoute: () => BlockingGrandparentRoute,
} as any)

const WaterfallGrandparentParentChildRoute =
  WaterfallGrandparentParentChildImport.update({
    path: '/child',
    getParentRoute: () => WaterfallGrandparentParentRoute,
  } as any)

const BlockingGrandparentParentChildRoute =
  BlockingGrandparentParentChildImport.update({
    path: '/child',
    getParentRoute: () => BlockingGrandparentParentRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/blocking/grandparent': {
      id: '/blocking/grandparent'
      path: '/blocking/grandparent'
      fullPath: '/blocking/grandparent'
      preLoaderRoute: typeof BlockingGrandparentImport
      parentRoute: typeof rootRoute
    }
    '/waterfall/grandparent': {
      id: '/waterfall/grandparent'
      path: '/waterfall/grandparent'
      fullPath: '/waterfall/grandparent'
      preLoaderRoute: typeof WaterfallGrandparentImport
      parentRoute: typeof rootRoute
    }
    '/blocking/grandparent/parent': {
      id: '/blocking/grandparent/parent'
      path: '/parent'
      fullPath: '/blocking/grandparent/parent'
      preLoaderRoute: typeof BlockingGrandparentParentImport
      parentRoute: typeof BlockingGrandparentImport
    }
    '/waterfall/grandparent/parent': {
      id: '/waterfall/grandparent/parent'
      path: '/parent'
      fullPath: '/waterfall/grandparent/parent'
      preLoaderRoute: typeof WaterfallGrandparentParentImport
      parentRoute: typeof WaterfallGrandparentImport
    }
    '/blocking/grandparent/parent/child': {
      id: '/blocking/grandparent/parent/child'
      path: '/child'
      fullPath: '/blocking/grandparent/parent/child'
      preLoaderRoute: typeof BlockingGrandparentParentChildImport
      parentRoute: typeof BlockingGrandparentParentImport
    }
    '/waterfall/grandparent/parent/child': {
      id: '/waterfall/grandparent/parent/child'
      path: '/child'
      fullPath: '/waterfall/grandparent/parent/child'
      preLoaderRoute: typeof WaterfallGrandparentParentChildImport
      parentRoute: typeof WaterfallGrandparentParentImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexLazyRoute,
  BlockingGrandparentRoute: BlockingGrandparentRoute.addChildren({
    BlockingGrandparentParentRoute: BlockingGrandparentParentRoute.addChildren({
      BlockingGrandparentParentChildRoute,
    }),
  }),
  WaterfallGrandparentRoute: WaterfallGrandparentRoute.addChildren({
    WaterfallGrandparentParentRoute:
      WaterfallGrandparentParentRoute.addChildren({
        WaterfallGrandparentParentChildRoute,
      }),
  }),
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/blocking/grandparent",
        "/waterfall/grandparent"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/blocking/grandparent": {
      "filePath": "blocking/grandparent.tsx",
      "children": [
        "/blocking/grandparent/parent"
      ]
    },
    "/waterfall/grandparent": {
      "filePath": "waterfall/grandparent.tsx",
      "children": [
        "/waterfall/grandparent/parent"
      ]
    },
    "/blocking/grandparent/parent": {
      "filePath": "blocking/grandparent/parent.tsx",
      "parent": "/blocking/grandparent",
      "children": [
        "/blocking/grandparent/parent/child"
      ]
    },
    "/waterfall/grandparent/parent": {
      "filePath": "waterfall/grandparent/parent.tsx",
      "parent": "/waterfall/grandparent",
      "children": [
        "/waterfall/grandparent/parent/child"
      ]
    },
    "/blocking/grandparent/parent/child": {
      "filePath": "blocking/grandparent/parent/child.tsx",
      "parent": "/blocking/grandparent/parent"
    },
    "/waterfall/grandparent/parent/child": {
      "filePath": "waterfall/grandparent/parent/child.tsx",
      "parent": "/waterfall/grandparent/parent"
    }
  }
}
ROUTE_MANIFEST_END */
